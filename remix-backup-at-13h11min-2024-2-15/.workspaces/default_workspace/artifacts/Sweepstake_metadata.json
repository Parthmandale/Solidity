{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "ProtocolMaintainanceFeeAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "charityDonationFeeAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "interval",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "vrfCoordinatorV2",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"internalType": "uint32",
						"name": "callbackGasLimit",
						"type": "uint32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "Not_ProtocolMaintainanceFeeAddress",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "have",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "want",
						"type": "address"
					}
				],
				"name": "OnlyCoordinatorCanFulfill",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Sweepstake__CannotRefund",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Sweepstake__DuplicatePlayer",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Sweepstake__NotEnoughFeeToEnterSweepstake",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Sweepstake__OnlyPlayerCanRefund",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Sweepstake__PlayerAddressInvalid",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Sweepstake__PriceAlreadyDistributed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Sweepstake__SweepstakeNotOpen",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Sweepstake__SweepstakeNotOver",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Sweepstake__TransferFailed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "sweepstakeState",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "numPlayers",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentBal",
						"type": "uint256"
					}
				],
				"name": "Sweepstake__UpkeepNotNeeded",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "newFeeAddress",
						"type": "address"
					}
				],
				"name": "FeeAddressChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "refunded",
						"type": "address"
					}
				],
				"name": "RefundAddress",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "RequestedSweepstakeWinner",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address[]",
						"name": "newPlayer",
						"type": "address[]"
					}
				],
				"name": "SweepstakeEntered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "SweepstakeRefunded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					}
				],
				"name": "SweepstakeWinnerPicked",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "addressToSweepsatkeId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "charityDonation",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "checkUpkeep",
				"outputs": [
					{
						"internalType": "bool",
						"name": "upkeepNeeded",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "newPlayers",
						"type": "address[]"
					}
				],
				"name": "enterSweepstake",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "getActivePlayerIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "playerIndex",
						"type": "uint256"
					}
				],
				"name": "getRefund",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getState",
				"outputs": [
					{
						"internalType": "enum Sweepstake.SweepstakeState",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "i_entranceFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "i_interval",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "performUpkeep",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "protocolMaintainance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "randomWords",
						"type": "uint256[]"
					}
				],
				"name": "rawFulfillRandomWords",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_ProtocolMaintainanceFeeAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_charityDonationFeeAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "s_players",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_recentWinner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_sweepstakeStartTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sweepstakeId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalFees",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "winnerPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Capstone Project | Defi Talents",
			"kind": "dev",
			"methods": {},
			"title": "Sweepstake Decentralized Application",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "This contract is defining Sweepstaking contract. The protocol should do the following: 1. Enter Sweepstake function to enter the Sweepstake to win the prize pool. 2. Duplicate address's are not allowed 3. Users are allowed to get a refund of their ticket & value if they call the `refund` function 4. Every X seconds, the Sweepstake will be able to draw a winner and and send the winning prize pool to the winner. 5. The Prize pool will be 90% of the total value of the Sweepstake and rest will be the fees for the protocol's owner. 6. The owner of the protocol will set a fee. 7. ETH/USDC will be used as the currency for the Sweepstake. 8. small element to charity donate 9. What if a person using 100 different address entered into the Sweepstake then have more than 50% chance to win the Sweepstake. 10. Using chailink VRF, Automation and Agreegator for random number, automatic winner selection and Price Conversion respectivily.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Sweepstake.sol": "Sweepstake"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
			"keccak256": "0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904",
			"license": "MIT",
			"urls": [
				"bzz-raw://038eef992d813c20737fbe94e3a36e5d541d1aa736158dd2a43dd5b840b8c360",
				"dweb:/ipfs/QmZWJ25Yr1sUSAsfJRKvTMDmGkmy63hHhB495CUL1bpNz4"
			]
		},
		"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
			"keccak256": "0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340",
			"license": "MIT",
			"urls": [
				"bzz-raw://b738dba680a6fbc4afc85819743f13f5b7f4790ec8634c9894e1160327b11b6e",
				"dweb:/ipfs/Qmbv3euvQppeBm2g61khcJSRMZWi78xUWzbnjKAvDBnka4"
			]
		},
		"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
			"keccak256": "0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a",
			"license": "MIT",
			"urls": [
				"bzz-raw://d66b2096987616cda4611c109d9904863872ca5852d736b30f0e19e49afde35f",
				"dweb:/ipfs/Qmc6jpm3k3YuJG7U2s3FWr81Vk2rdQBhdqD9sA6b8Cr9BE"
			]
		},
		"Sweepstake.sol": {
			"keccak256": "0xabd9708b23864df9770231681ada209bf344cbabab7672cc2cdef7ebe26a3eea",
			"license": "MIT",
			"urls": [
				"bzz-raw://d287a075e33fb7bc0f158c94103aea33ea1642ba2e621421e36184e3d8065551",
				"dweb:/ipfs/QmdMHq7Ediftw3HgvUDNk1PNUVWuVMGX5tmcRARYHdm2zB"
			]
		}
	},
	"version": 1
}